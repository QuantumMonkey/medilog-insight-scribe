
import { logActivity } from "@/services/securityService";
import { getAllConsultations } from "./consultationCrud";
import { Medication } from "@/types/health";
import jsPDF from 'jspdf';
import 'jspdf-autotable';

// Export consultations to JSON
export const exportConsultations = (): string => {
  try {
    const consultations = getAllConsultations();
    const exportData = {
      consultations,
      exportDate: new Date().toISOString(),
      totalCount: consultations.length
    };
    
    logActivity('export', `Exported ${consultations.length} consultations`, 'success');
    return JSON.stringify(exportData, null, 2);
  } catch (error) {
    logActivity('export', `Failed to export consultations: ${error}`, 'failure');
    return JSON.stringify({ error: "Export failed", message: String(error) });
  }
};

// Export medication information to PDF
export const exportMedicationToPDF = (medication: Medication): { pdf: jsPDF, filename: string } => {
  try {
    // Create a new PDF document
    const doc = new jsPDF();
    const filename = `medication_${medication.name.replace(/\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.pdf`;

    // Add title
    doc.setFontSize(20);
    doc.text('Medication Information', 15, 15);
    
    // Add medication details
    doc.setFontSize(12);
    doc.text(`Name: ${medication.name}`, 15, 30);
    doc.text(`Dosage: ${medication.dosage}`, 15, 40);
    doc.text(`Frequency: ${medication.frequency}`, 15, 50);
    doc.text(`For Condition: ${medication.forCondition}`, 15, 60);
    doc.text(`Start Date: ${medication.startDate}`, 15, 70);
    
    if (medication.endDate) {
      doc.text(`End Date: ${medication.endDate}`, 15, 80);
    }
    
    doc.text(`Status: ${medication.isActive ? 'Active' : 'Completed'}`, 15, 90);
    
    // Add notes section
    doc.setFontSize(14);
    doc.text('Notes:', 15, 110);
    doc.setFontSize(12);
    
    // Handle multi-line notes
    const splitNotes = doc.splitTextToSize(medication.notes, 180);
    doc.text(splitNotes, 15, 120);
    
    // Add reminders if available
    if (medication.reminderTimes && medication.reminderTimes.length > 0) {
      const yPosition = 140 + splitNotes.length * 7;
      doc.setFontSize(14);
      doc.text('Reminder Times:', 15, yPosition);
      doc.setFontSize(12);
      
      medication.reminderTimes.forEach((time, index) => {
        doc.text(`â€¢ ${time}`, 20, yPosition + 10 + (index * 8));
      });
    }
    
    // Add footer
    doc.setFontSize(10);
    doc.text('Generated by MediLog Insight Scribe', 15, 280);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 15, 285);
    
    logActivity('export', `Exported medication information for ${medication.name}`, 'success');
    return { pdf: doc, filename };
  } catch (error) {
    logActivity('export', `Failed to export medication information: ${error}`, 'failure');
    throw error;
  }
};
